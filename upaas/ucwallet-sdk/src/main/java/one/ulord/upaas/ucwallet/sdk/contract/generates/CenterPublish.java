package one.ulord.upaas.ucwallet.sdk.contract.generates;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class CenterPublish extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_GETORDERDETAILS = "getOrderDetails";

    public static final String FUNC_CLAIMPOOL_ = "claimPool_";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_GETCLAIMDETAILS = "getClaimDetails";

    public static final String FUNC_INFODB_ = "infoDb_";

    public static final String FUNC_UPDATECLAIMPRICE = "updateClaimPrice";

    public static final String FUNC_UPDATECLAIMAUTHOR = "updateClaimAuthor";

    public static final String FUNC_MULINSERTWHITE = "mulInsertWhite";

    public static final String FUNC_TRANSFERADMINSHIP = "transferAdminship";

    public static final String FUNC_CREATECLAIM = "createClaim";

    public static final String FUNC_ORDERDB_ = "orderDb_";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_CLAIMDEPOSIT_ = "claimDeposit_";

    public static final String FUNC_CREATEORDER = "createOrder";

    public static final String FUNC_MANGEWHITELIST = "mangeWhiteList";

    public static final String FUNC_CLAIMDB_ = "claimDb_";

    public static final String FUNC_SETCLAIMDEPOSIT = "setClaimDeposit";

    public static final String FUNC_UPDATECLAIMWAIVE = "updateClaimWaive";

    public static final String FUNC_NEWOWNER = "newOwner";

    public static final String FUNC_TOKEN_ = "token_";

    public static final String FUNC_WHITELIST_ = "whitelist_";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_UPDATECLAIM = "updateClaim";

    public static final String FUNC_PAY_ = "pay_";

    public static final Event LOGSIMPLECLAIM_EVENT = new Event("LogSimpleClaim", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event LOGWHILECHANGED_EVENT = new Event("LogWhileChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event LOGERROR_EVENT = new Event("LogError", 
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event LOGADMINSHIPTRANSFERRED_EVENT = new Event("LogAdminshipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event LOGOWNERSHIPRENOUNCED_EVENT = new Event("LogOwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event LOGOWNERSHIPTRANSFERRED_EVENT = new Event("LogOwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList());
    ;

    protected CenterPublish(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                            ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, gasProvider);
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, String, String, byte[]>> getOrderDetails(byte[] _oid) {
        final Function function = new Function(FUNC_GETORDERDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_oid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes16>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, BigInteger, String, String, byte[]>>(
                new Callable<Tuple6<BigInteger, BigInteger, BigInteger, String, String, byte[]>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, BigInteger, String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, BigInteger, BigInteger, String, String, byte[]>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<String> claimPool_() {
        final Function function = new Function(FUNC_CLAIMPOOL_, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> initialize(String _token, String _claim, String _order, String _info, String _pay) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(_token),
                new Address(_claim),
                new Address(_order),
                new Address(_info),
                new Address(_pay)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<String, String, BigInteger, BigInteger, BigInteger, Boolean, BigInteger>> getClaimDetails(byte[] _cid) {
        final Function function = new Function(FUNC_GETCLAIMDETAILS,
                Arrays.<Type>asList(new Bytes16(_cid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, BigInteger, BigInteger, Boolean, BigInteger>>(
                new Callable<Tuple7<String, String, BigInteger, BigInteger, BigInteger, Boolean, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, BigInteger, BigInteger, Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, BigInteger, BigInteger, Boolean, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (Boolean) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<String> infoDb_() {
        final Function function = new Function(FUNC_INFODB_,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateClaimPrice(byte[] _cid, String _author, BigInteger _newprice) {
        final Function function = new Function(
                FUNC_UPDATECLAIMPRICE,
                Arrays.<Type>asList(new Bytes16(_cid),
                new Address(_author),
                new Uint256(_newprice)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateClaimAuthor(byte[] _cid, String _author, String _newAuthor) {
        final Function function = new Function(
                FUNC_UPDATECLAIMAUTHOR,
                Arrays.<Type>asList(new Bytes16(_cid),
                new Address(_author),
                new Address(_newAuthor)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mulInsertWhite(List<String> _addresses) {
        final Function function = new Function(
                FUNC_MULINSERTWHITE,
                Arrays.<Type>asList(new DynamicArray<Address>(
                        org.web3j.abi.Utils.typeMap(_addresses, Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferAdminship(String _newAdmin) {
        final Function function = new Function(
                FUNC_TRANSFERADMINSHIP,
                Arrays.<Type>asList(new Address(_newAdmin)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createClaim(String _udfs, String _author, BigInteger _price, BigInteger _type, Boolean _storage) {
        final Function function = new Function(
                FUNC_CREATECLAIM,
                Arrays.<Type>asList(new Utf8String(_udfs),
                new Address(_author),
                new Uint256(_price),
                new Uint8(_type),
                new Bool(_storage)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> orderDb_() {
        final Function function = new Function(FUNC_ORDERDB_,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> acceptOwnership() {
        final Function function = new Function(
                FUNC_ACCEPTOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> claimDeposit_() {
        final Function function = new Function(FUNC_CLAIMDEPOSIT_,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> createOrder(String _customer, byte[] _claimId, String _payer, BigInteger _cost) {
        final Function function = new Function(
                FUNC_CREATEORDER,
                Arrays.<Type>asList(new Address(_customer),
                new Bytes16(_claimId),
                new Address(_payer),
                new Uint256(_cost)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mangeWhiteList(String _target, Boolean _allow) {
        final Function function = new Function(
                FUNC_MANGEWHITELIST,
                Arrays.<Type>asList(new Address(_target),
                new Bool(_allow)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> claimDb_() {
        final Function function = new Function(FUNC_CLAIMDB_,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setClaimDeposit(BigInteger _newDeposit) {
        final Function function = new Function(
                FUNC_SETCLAIMDEPOSIT,
                Arrays.<Type>asList(new Uint256(_newDeposit)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateClaimWaive(byte[] _cid, String _author, Boolean _waive) {
        final Function function = new Function(
                FUNC_UPDATECLAIMWAIVE,
                Arrays.<Type>asList(new Bytes16(_cid),
                new Address(_author),
                new Bool(_waive)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> newOwner() {
        final Function function = new Function(FUNC_NEWOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> token_() {
        final Function function = new Function(FUNC_TOKEN_,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> whitelist_(String param0) {
        final Function function = new Function(FUNC_WHITELIST_,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(_newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> admin() {
        final Function function = new Function(FUNC_ADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateClaim(byte[] _cid, String _author, String _newudfs, BigInteger _newprice) {
        final Function function = new Function(
                FUNC_UPDATECLAIM,
                Arrays.<Type>asList(new Bytes16(_cid),
                new Address(_author),
                new Utf8String(_newudfs),
                new Uint256(_newprice)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> pay_() {
        final Function function = new Function(FUNC_PAY_,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<CenterPublish> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _pool, String _owner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_pool),
                new Address(_owner)));
        return deployRemoteCall(CenterPublish.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<CenterPublish> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _pool, String _owner) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_pool),
                new Address(_owner)));
        return deployRemoteCall(CenterPublish.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<LogSimpleClaimEventResponse> getLogSimpleClaimEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSIMPLECLAIM_EVENT, transactionReceipt);
        ArrayList<LogSimpleClaimEventResponse> responses = new ArrayList<LogSimpleClaimEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogSimpleClaimEventResponse typedResponse = new LogSimpleClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.author = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.udfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogSimpleClaimEventResponse> logSimpleClaimEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogSimpleClaimEventResponse>() {
            @Override
            public LogSimpleClaimEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOGSIMPLECLAIM_EVENT, log);
                LogSimpleClaimEventResponse typedResponse = new LogSimpleClaimEventResponse();
                typedResponse.log = log;
                typedResponse.author = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.udfs = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogSimpleClaimEventResponse> logSimpleClaimEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGSIMPLECLAIM_EVENT));
        return logSimpleClaimEventObservable(filter);
    }

    public List<LogWhileChangedEventResponse> getLogWhileChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGWHILECHANGED_EVENT, transactionReceipt);
        ArrayList<LogWhileChangedEventResponse> responses = new ArrayList<LogWhileChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogWhileChangedEventResponse typedResponse = new LogWhileChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._target = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._allow = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogWhileChangedEventResponse> logWhileChangedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogWhileChangedEventResponse>() {
            @Override
            public LogWhileChangedEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOGWHILECHANGED_EVENT, log);
                LogWhileChangedEventResponse typedResponse = new LogWhileChangedEventResponse();
                typedResponse.log = log;
                typedResponse._target = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._allow = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogWhileChangedEventResponse> logWhileChangedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGWHILECHANGED_EVENT));
        return logWhileChangedEventObservable(filter);
    }

    public List<LogErrorEventResponse> getLogErrorEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGERROR_EVENT, transactionReceipt);
        ArrayList<LogErrorEventResponse> responses = new ArrayList<LogErrorEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogErrorEventResponse typedResponse = new LogErrorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._errorNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogErrorEventResponse> logErrorEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogErrorEventResponse>() {
            @Override
            public LogErrorEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOGERROR_EVENT, log);
                LogErrorEventResponse typedResponse = new LogErrorEventResponse();
                typedResponse.log = log;
                typedResponse._errorNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogErrorEventResponse> logErrorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGERROR_EVENT));
        return logErrorEventObservable(filter);
    }

    public List<LogAdminshipTransferredEventResponse> getLogAdminshipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGADMINSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<LogAdminshipTransferredEventResponse> responses = new ArrayList<LogAdminshipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogAdminshipTransferredEventResponse typedResponse = new LogAdminshipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._old = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._new = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogAdminshipTransferredEventResponse> logAdminshipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogAdminshipTransferredEventResponse>() {
            @Override
            public LogAdminshipTransferredEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOGADMINSHIPTRANSFERRED_EVENT, log);
                LogAdminshipTransferredEventResponse typedResponse = new LogAdminshipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse._old = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._new = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogAdminshipTransferredEventResponse> logAdminshipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGADMINSHIPTRANSFERRED_EVENT));
        return logAdminshipTransferredEventObservable(filter);
    }

    public List<LogOwnershipRenouncedEventResponse> getLogOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGOWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<LogOwnershipRenouncedEventResponse> responses = new ArrayList<LogOwnershipRenouncedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogOwnershipRenouncedEventResponse typedResponse = new LogOwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogOwnershipRenouncedEventResponse> logOwnershipRenouncedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogOwnershipRenouncedEventResponse>() {
            @Override
            public LogOwnershipRenouncedEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOGOWNERSHIPRENOUNCED_EVENT, log);
                LogOwnershipRenouncedEventResponse typedResponse = new LogOwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogOwnershipRenouncedEventResponse> logOwnershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGOWNERSHIPRENOUNCED_EVENT));
        return logOwnershipRenouncedEventObservable(filter);
    }

    public List<LogOwnershipTransferredEventResponse> getLogOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGOWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<LogOwnershipTransferredEventResponse> responses = new ArrayList<LogOwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogOwnershipTransferredEventResponse typedResponse = new LogOwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogOwnershipTransferredEventResponse> logOwnershipTransferredEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogOwnershipTransferredEventResponse>() {
            @Override
            public LogOwnershipTransferredEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOGOWNERSHIPTRANSFERRED_EVENT, log);
                LogOwnershipTransferredEventResponse typedResponse = new LogOwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogOwnershipTransferredEventResponse> logOwnershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGOWNERSHIPTRANSFERRED_EVENT));
        return logOwnershipTransferredEventObservable(filter);
    }

    public static CenterPublish load(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                                     ContractGasProvider gasProvider) {
        return new CenterPublish(contractAddress, web3j, transactionManager, gasProvider);
    }

    public static class LogSimpleClaimEventResponse {
        public Log log;

        public String author;

        public String udfs;
    }

    public static class LogWhileChangedEventResponse {
        public Log log;

        public String _target;

        public Boolean _allow;
    }

    public static class LogErrorEventResponse {
        public Log log;

        public BigInteger _errorNumber;
    }

    public static class LogAdminshipTransferredEventResponse {
        public Log log;

        public String _old;

        public String _new;
    }

    public static class LogOwnershipRenouncedEventResponse {
        public Log log;

        public String previousOwner;
    }

    public static class LogOwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }
}
