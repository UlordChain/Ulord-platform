/**
 * Copyright(c) 2018
 * Ulord core developers
 */
package one.ulord.upaas.ucwallet.client;

import io.ipfs.api.IPFS;
import io.ipfs.api.MerkleNode;
import io.ipfs.api.NamedStreamable;
import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.response.EthGetBalance;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.utils.Convert;

import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.ExecutionException;

/**
 * @author haibo
 * @since 7/4/18
 */
public class UCWalletDemoApplication implements TransactionActionHandler {

    public void testContentContract() {
        try {
            System.out.println("Create a content contract object....");
            ContentContract contentContract = new ContentContract(
                    "http://192.168.12.231",
                    "0xfB5ef7CCb7e0CbB16f53d29B9B36e064D9c34772", // UShare UX
                    "0x5e4664010d090e9facd9b1813ffb17cab2a1861b",
                    "0xba6baf26e4d7aa8062a8921843ad4b5714afbb57",
                    "keystore/no1.keystore",
                    "12345678",
                    this
            );

            // get gas balance
            System.out.println("SUT balance:" + contentContract.getGasBalance().toString());
            try {
                System.out.println("Token balance main:" + contentContract.getTokenBalance().toString());
            } catch (Exception e) {
                e.printStackTrace();
            }


            if (false) {
                // set gas balance
                System.out.println("Transfer some SUT to...");
                contentContract.transferGas("transfer gas", "0x2e836371bf20107837da6ad9bb4d08d8f53f65ba",
                        new BigInteger("1000000000000"));
            }

            if (false) {
                // set gas balance
                System.out.println("Transfer some SUT to...");
                String hash = contentContract.transferGas("0x2e836371bf20107837da6ad9bb4d08d8f53f65ba",
                        new BigInteger("1000000000000"));
                System.out.println(hash);
            }


            String address = "0x8cabc2956936a9dbe28429ea7393e4f4618dca87,0x9c3787f8a94e1e6f4e3412ef2fcac0d38b1990ee,0xaefb6f5073bc78ab7dd27bef4b1399e7249b5125,0xb934bf55f5543350c917d55bac666698b66972a9,0xc01477934f1c1b1e5d4c515f8e8c9cbacfe9b6dc,0xd2d8f250705c97b3035f5de7205ae5416e4a6215,0xd9df2632427e83258de3372f30f4e62adb29ab27,0x6d961d71bbde5bf20dff8f7bb83a49852fd2be25,0x8d09c9c2036ddcc57964018a6d627d051137c0a3,0xea1d5e49f938e4ac838745ddb813df59764f83eb,0x507d72fa6198b6a4b4e371eedddbd4917e426113,0x50fab7ca278eac68c2c7d9440be54905bb3e5d76,0xeeed3882a74437b87adb985022f2e74ec50eba61,0xfef862bd276cbf7ac026066d175eebfa87e33838,0x1d6b56e3cb54b2a16e4cffd981a36c761f3606c7,0x30752c7c753c0931d4941cb30538dc0e8544b7f1,0x49568bc34d74f8b48e59b5766e2a127bcc1baa18,0xa27891a75017d2b699cedbb1485c95e851ba1257,0x50e3e2ab78e64cc5e0d0d390aab3c1ac4cdfabd7,0x9b41de41857bafee63e09219c1512982d24abca0,0x9ceef2df0bfc49e4d70945a1456caaecffeca3a8,0x4d23cddc56b28282d6488f170efc3423f83b80f8,0x08a7b51eff8c12633980e70dc551d4ee19ed899d,0x504ab17f0683f772b109fb35e05a947ffb644f6b,0x37b4ff4041c99302c71c53a764ce5f21df8df341,0x101a2af08ce11a61c45d2cff7981e19d42590d3b,0x4aab0a1be4447d46e06653c1feac9b13fc162d87,0x818294a025a49c01c9e6723c16589711446b9755,0x3e8ce5a4aa3d4d82bf76bc32409961d538521c4f,0xb795cee63d1fcb35369fb4f08516841480c14a26,0x78b57616e90ef4de7b5050f9676a0df8100f9b8e,0xd22f6b62cb5a8de9f6063e30fa5e4ae107179c67,0x9063862ed721ff59cc7cf39ddaf7835851802285,0x9da0d0879047832e9a5b4418994d41358d57cabb,0xdb4c510c28a32cef8b95d1d0fdd71359b6cde5f3,0xaba48bb6a1ea9adfdaa1d20d321452009b2c524c,0xcf4a8c4c74ebbcade78048d67b7985a80fcd4c24,0x726eb4f770aefcfcd9fedfcb703e8cbe80b43b2f,0x587389f24937deb17e61c5d2375cd139f3f3c775,0xe23b5525580e6d7ba578fc71970c0490ec7c34fe,0xc395cf874b3ae6199b36b30eb94a44babf2ae169,0xff9cda8bc7c4a046e6667eae64d16f5858e5fda3,0x477dead969f40a9e7ecef8ac0eaf1d3692daae03,0x0ea8015ce8620e582ada28315dc9ea9077452b31,0xdec401964fbf2dd359f1eba0c8f2e6bbe493b05b,0xe3453de0d1563042bb60d477a8feeed867c4d7ef,0x6753c7c2eb7d3d3432e4754b3ca382ff857fb62d,0x9c5f2f194dcf6b5009f6820a599bf8850a6afb4f,0xc4ef18b4b7a82951a06d3376f88ad7ba7d9e4fbe,0xe5a979d6138fc2e4300d7d8a7ee01af73fc3a3a3,0x0c1901472e1eb31db73b4d4b9a3e20b91f191dbc,0x08607a0ba851ca03ffe1a13cd8e12791e94a1f34,0x162f9a46eff0c21cdfff9199cecdc898f62ee85d,0x416724ec81cd0baa572fc28beff3b3d4be2f258b,0x92acccad366557faf5f15d0fe9a133bcad260443,0xad6b08f65ad6da3ebdd70000dc4e05c762eeeca3,0xb2cc867fcbd5eb721e99085795203920375bb735,0xe1677b9013bf90b42c17466de9716e47d6db3f84,0xd7472d19c56022c8362d2e8bd36afcab7941cbb5,0xa3749cbbfc06d254f59426bc280c483a89344e4f,0x097039d0e2b1102b458bff890339809a7d9ac5b6,0xd1a3ef7f9c24bd9db7b00583ab3c00dff4400fc9,0xab39a92c307bc242d4a69781366139f56283cc01,0x3991c4073409ad46870ea3d3120aa2aba933a768,0xa9a0821f5c0367acecd98b3622659d07ddb782cb,0x22d433c153750028c7ce028149e456941cb9bc8d,0x31015d31f913a5d8adce766f658f6267871ab99c,0x47ea51e84611364431b02eb6c30515aac43d137a,0xb81c6f44f76567090135c4da9fd4434189d07cf7,0x46821eb025f11e5bbcf64c2cef04d0ba5472b337,0x0314946d9ad5b9c9a590cb25fe3a5aba1b0ff928,0x10a2f53102e0f9699f7599790b62c922e7d136d9,0x2062d1ed6272022cf550fa6d0bcdfa8049c5ad6f,0x22438dd7c7e614f30bd94d82fd625a4de05e7f76,0x2dd9c5b188f9fe61adcb4d2991485952d6e444d2,0x2ed4f27741ca481986613b5223564e8dd1cbf7c1,0x3222768ab6731ae7efb64d838baf9a15b493b51a,0x3425ff817c43a398f0c955507a630181cff78da5,0x39080b78290fe84c590fa61167cb997a6969ee3f,0x3c4231c549392de995d95b8dbd25cdc521bae269,0x424918b147aac7bfd969bc39646e6b3dc78d3157,0x437d84b95ed95adcb080ced4c9c17e44bb870331,0x444429e55431daae8d8583ed03a15dfade2fa678,0x4a2825f4b7f520ad6ed4e99e7cea75002cc8b610,0x4c772342cc3fe6b4b8c0dd39b4c362749aff415a,0x4ffba78ad621cc8588c6b3beaa83f670d74888b2,0x50b491a4b584122870c04a8fb9604b143918112a,0x54a36fbf6ff63ff2afb8085d70cfbd01d1b86844,0x553938769a4472603f038defff79858db590b020,0x5b8741bc70fa19fdd795ef49fcbef4b8ff6204cd,0x5e88d10fbb13b4408768b134b671b291a19b1b86,0x667e9b27926d83c5ac010d7244dc5c969911b77c,0x68a4e9612b92d55cd23e9d110cf16dfedda1049a,0x6a9caba0d0aa93cad1c092532899b2205ea44688,0x71d37077b8fd194fc1cc3408ed22fde68b2acb76,0x730a0c7ae7af54fc0980fa07d1d2b03970dfd8ce,0x87463577f697d83357cc8000a8a311c9a78496b2,0x8c88b90d656c2491ba0c400b166f3481183a88be,0x8f63e42eb6779269e8646be45186be32c204c543,0x9099ab1fe15e1b20b3240c48b088fc91ad30a641,0x97c4d226f6f855968a8cd03bec6894feece8d8ba,0x9cd4ff2f11a08023a21948e8a390afde4ec39938,0x9dfcb14be4eb251a99de3a8160b599a12e57fe7e,0xa44aa65492f76e0de7139efcde53f640f05d4df7,0xac2ed0398d83e9cd525f932291aa21e4d3ce63ec,0xacf4e8140ca70cda991a9c53410baee67caf129a,0xaf54b8f9f07582b79d073bd139a8988c568a3314,0xb290bf381806646c036832836fbc0150abaa8040,0xb2af749b7bcafcb142471bd28d6a773b52c29064,0xb70467909c05b15f76619d9a2a204ca255aa2a74,0xb7b16fc54ac20e5d12929a9ada6ce20c6a3368e7,0xcdb52a9dff0ad3927333ba3822d1645f357fe31b,0xd513944fdb1403c4b82b5022da65de660ce5fbef,0xdfc86eff4a27b8386a1002bd43b1928a2dcd680f,0xe34f7fd4ba508bc03ef1e84e2fa8a494b7daba6b,0xe3791439a66ec62b9c19a37162c793653ffc9c46,0xe4d4250be6e9c8bb62d13cdd97ffc9db271ecc72,0xe50ad84644bab84dacc8163fb4e74c68fded0222,0xeaafcaa66c7f8a70f2b81e0ab61989c93a6b0076,0xf25abf2a2bd499cf9de47b47e04c17d7dd18c388,0xff7ba6bace4537b4503577502015d5116d6e6caf,0xb7cf795ab8255c944e7b3f50c94b0abe8d8c5440,0xeb450c8036efb37ba41f675348ee4f7a070dd614,0x0f7452164376285dfb084c24069e3fb121f578be,0x7e106c02383eabbaaccb054323cccfea5018c0ea,0xed243c63b391ed9fa2d53846720b428aff6d5bb1,0x9bc0f8a0ec32077b2a5b2c02383e7cd6faf67c80,0xb2a28ebd4c1ef08cd82d72a704d2ecd362db150f,0xf88f3a02b4ffb9da49c1c30b977a6bbdc6936a93,0x71943d1af22b8d25e0ffa13e55cce415cf9134f9,0x5a8e4b84914b8587957b74ff658765af4ba2b80d,0xde17a187c3876a56e54b0dafd82a44f5e5e8218a,0x8807e5ddd947d673af5bb0bae927d1a9af176392,0xce26db580b88bf6a385d8f32a7453207d1f1e0c0,0x5d760b2e11617bbe221ec5567d8e0314da687e0e,0xb00ada1c55b2cce95be2ca2f519f5873fa9d2d00,0x640c63cb371b5f7501e5f40ffaf839564e49bc35,0xcc30f855d6c2844f44a189087ab3074f8081359f,0xe3a5d7cdd1a0ad4b4ab0a791a6f08e379697a33c,0xb1a837cc10eeeb1106a63ec3a352d5f94abca8dc,0x94b9e72c63510468750f1c1b401070761673ac44,0x394efa2f69e28f86d75c7933485024474b9643d8,0x62ae56eac338a755651b1aee30742eb4185ed1af,0xd185de56e62a139dfd19f656d7c4dcea3f51e920,0xce1d6ebac88a712462efcf610fa83b55d2316a5c,0xd245c92bd9fed3963cc6de94b222d3cd232bff0e,0xa0e2279b5d11d3845ae5ea48b2ae7c43da753056,0x6084f7b3b23abef0a87f935c129ef28e2e4e11a5,0x9f5fe64f2afdb36151831f412668e6b2452b6269,0xea14740f30b92747195ae932d207bac8529bd974,0x20d57c42e9e186c747f7e2b4f665db947c6f6cbd,0x1a503f2d19ff8b474b36af10310a8cf10a7e6e8e,0x9bee147b30f8a0fde9467bcca51442ea7f8e0762,0xa81433436a7ff939102755853483d0c7e6e51243,0xd72d057be8df507b44325811f6f2c65fa5f4f434,0x7ca4010a68256c252bf6b42ba3cad2dab61ae832,0x674c6c51bcdbb8c9e8a9f1732ccb803d934e30b9,0x040ffbbec36f4f5a399ed09e72562895653da2c7,0x446c939d52c6d71c342ac27a6c7efab92dcb381a,0xaba82ce8b34a75d43b4be3f25c66bef83f358206,0x7f95d17ab8fcd99750e0bfb6c97a181fd97afc2d,0x29b7c8e5f402343a402dcc1bb7735bd9c981a33d,0xafbbd1a6833b4a2dacbae8990b81b731283e67ba,0xee8360c0ab2136596e02b86e02e5b5bc430add42,0x21010a61c19935343b2935776ad5a9e00ec12034,0x5f2792dc57ea1029af04fa763ccc69d252469c88,0xa73d99c93ff230be5f8414c504c55d7d2aba2787,0x7ee3ce6ca32d94d4360b64b8e654ce0e2c946e52,0x42b8084ae1285aae166b325a5267ff4eee6d56b2,0x1fe6688e1447d49ea3b9187d49dc2e638dc797fa,0xfb1965a789fab79c8f820ce15c0ff0b90746baf8,0xf5f5d27dc48c7f3ef1a1db544255bb5ccce36c0f,0xabc6969a4b5870059d072b406d7ec14624777bd3,0xbf9cd86eb00ca74e0575c37519932c547eae074b,0x651eeaa61c444611d493fea13c3f59f943cfa344,0x28a033a2473c66dd36419f24a736d735c9ec8258,0xd347cb9bb92a5fe8305a50c5b86ac9969b04cad1,0x74440a8fdd7c11c6e4e84f20d49d1f63ccbe561d,0xb40c01adb488a82222d0cfdf4524b115973a4e2c,0xbfb8b1364633ee825008ded25c59679dc5723335,0x46cd17b068bffeac71c1a2678bea1cff93c84ef3,0x1b09c086220a26515278386b3abe4d832b4905bf,0x84f80f652bd3c14440a55fc29cb12e7deaf5d72f,0x6c4176399729229ab369271bd5afe9c108e0b8d5,0x2770c8c2efe2a949b324a532750274be1aa57170,0x1e98dd77e3a859b522094d40ab574d4a1fb7ff20,0x017c44285f8a019467ae542d73a15a193b306689,0x01e69a7620e59abc7a9844fb6f5d019319c5328c,0x026d2868f97476b617b73ae37565e5932e8a1fc8,0x0357789b8150e3472234dec7bd7f3db401e52b73,0x04b8c139e2db33eb044389b927bb489aa0a9feb5,0x04f83cb224f1ec062255c4d43cf9600521137cef,0x05b3b54f00b1abc4ab2420f09b56ba32b0b71f63,0x05d7992e51750f9ef552e65c8f2d20497998a6f2,0x05faccdc2b902bca078a3a6b2c025c7a39841d65,0x06a19a0cab1fe12125aeaffc4bcbec1a4ad10d8a,0x074a0ec426a084fc10938d192956238ecb0ad207,0x07a8bad2c128bf248253ef3997d2cf4ac8adf733,0x080507557aafd2ef76fd8ab73b6cf83c69fcf57c,0x0c9ac6228469edb74d08e4095377182e7e3e693e";

            String[] addr = address.split(",");

            List<String> addressList = Arrays.asList(addr);

            if (false) {

                System.out.println("Transfer some SUT to...");
                contentContract.transferSameSuts("transfer suts", new BigInteger("10000000000000000"), addressList,
                        new BigInteger("2000000000000000000"));
            }

            if (false) {

                System.out.println("Transfer some SUT to...");
                String hash = contentContract.transferSameSuts(new BigInteger("10000000000000000"), addressList, new BigInteger("2000000000000000000"));
                System.out.println(hash);
            }

            String quality = "100000000000000,200000000000000,300000000000000,400000000000000,500000000000000,600000000000000,700000000000000,800000000000000,900000000000000,1000000000000000,1100000000000000,1200000000000000,1300000000000000,1400000000000000,1500000000000000,1600000000000000,1700000000000000,1800000000000000,1900000000000000,2000000000000000,2100000000000000,2200000000000000,2300000000000000,2400000000000000,2500000000000000,2600000000000000,2700000000000000,2800000000000000,2900000000000000,3000000000000000,3100000000000000,3200000000000000,3300000000000000,3400000000000000,3500000000000000,3600000000000000,3700000000000000,3800000000000000,3900000000000000,4000000000000000,4100000000000000,4200000000000000,4300000000000000,4400000000000000,4500000000000000,4600000000000000,4700000000000000,4800000000000000,4900000000000000,5000000000000000,5100000000000000,5200000000000000,5300000000000000,5400000000000000,5500000000000000,5600000000000000,5700000000000000,5800000000000000,5900000000000000,6000000000000000,6100000000000000,6200000000000000,6300000000000000,6400000000000000,6500000000000000,6600000000000000,6700000000000000,6800000000000000,6900000000000000,7000000000000000,7100000000000000,7200000000000000,7300000000000000,7400000000000000,7500000000000000,7600000000000000,7700000000000000,7800000000000000,7900000000000000,8000000000000000,8100000000000000,8200000000000000,8300000000000000,8400000000000000,8500000000000000,8600000000000000,8700000000000000,8800000000000000,8900000000000000,9000000000000000,9100000000000000,9200000000000000,9300000000000000,9400000000000000,9500000000000000,9600000000000000,9700000000000000,9800000000000000,9900000000000000,10000000000000000,10100000000000000,10200000000000000,10300000000000000,10400000000000000,10500000000000000,10600000000000000,10700000000000000,10800000000000000,10900000000000000,11000000000000000,11100000000000000,11200000000000000,11300000000000000,11400000000000000,11500000000000000,11600000000000000,11700000000000000,11800000000000000,11900000000000000,12000000000000000,12100000000000000,12200000000000000,12300000000000000,12400000000000000,12500000000000000,12600000000000000,12700000000000000,12800000000000000,12900000000000000,13000000000000000,13100000000000000,13200000000000000,13300000000000000,13400000000000000,13500000000000000,13600000000000000,13700000000000000,13800000000000000,13900000000000000,14000000000000000,14100000000000000,14200000000000000,14300000000000000,14400000000000000,14500000000000000,14600000000000000,14700000000000000,14800000000000000,14900000000000000,15000000000000000,15100000000000000,15200000000000000,15300000000000000,15400000000000000,15500000000000000,15600000000000000,15700000000000000,15800000000000000,15900000000000000,16000000000000000,16100000000000000,16200000000000000,16300000000000000,16400000000000000,16500000000000000,16600000000000000,16700000000000000,16800000000000000,16900000000000000,17000000000000000,17100000000000000,17200000000000000,17300000000000000,17400000000000000,17500000000000000,17600000000000000,17700000000000000,17800000000000000,17900000000000000,18000000000000000,18100000000000000,18200000000000000,18300000000000000,18400000000000000,18500000000000000,18600000000000000,18700000000000000,18800000000000000,18900000000000000,19000000000000000,19100000000000000,19200000000000000,19300000000000000,19400000000000000,19500000000000000,19600000000000000,19700000000000000,19800000000000000,19900000000000000,20000000000000000";

            String[] aq = quality.split(",");

            BigInteger[] biQuality = new BigInteger[aq.length];
            for (int i = 0; i <= aq.length-1 ; i++){
                biQuality[i] = new BigInteger(aq[i]);
            }

            List<BigInteger> quaList = Arrays.asList(biQuality);


            if (false) {

                System.out.println("Transfer diff SUT to...");
                contentContract.transferDiffSuts("transfer suts", quaList, addressList,
                        new BigInteger("3000000000000000000"));
            }

            if (false) {

                System.out.println("Transfer diff SUT to...");
                String hash = contentContract.transferDiffSuts(quaList, addressList, new BigInteger("3000000000000000000"));
                System.out.println(hash);
            }

            if (false) {
                // test token transfer
                System.out.println("Transfer 100000000000000000(1Token) to address 0x24fd610e1769f1f051e6d25a9099588df13d7feb... ");
                contentContract.transferToken("tranfer token:",
                        "0x24fd610e1769f1f051e6d25a9099588df13d7feb",
                        BigInteger.valueOf(1000000000));
            }

            if (false) {
                // test publish content
                System.out.println("Connect to UDFS network...");
                UDFSClient udfsClient = new UDFSClient("/ip4/114.67.37.2/tcp/20418"); // Test UDFS network
                System.out.println("Publish a sentence to UDFS ...");
                String udfsHash = udfsClient.publishResource("test",
                        ("Hello Ulord Platform" + Calendar.getInstance().toString()).getBytes());
                byte[] udfsContent = udfsClient.getContent(udfsHash);
                if (udfsContent != null) {
                    System.out.println(new String(udfsContent));
                } else {
                    System.out.println("Cannot get content from UDFS.");
                }

                System.out.println("publish a resource " + udfsHash
                        + " to ulord using address:0x3f16131ac9203656a9ca790f23878ae165c3eb4f");
                contentContract.publishResource("publish resource", udfsHash,
                        "0x3f16131ac9203656a9ca790f23878ae165c3eb4f",
                        BigInteger.valueOf(100000000000000L), false);
            }

            // first, we nedd to approve publish contract to using current user address tokens
            // !! A user address only can approve once, you can approve it again after approve with a ZERO parameter
            // Current action must be successfully execute before transfer tokens
//            contentContract.approveContractQuality("Clear Approve", BigInteger.ZERO);
//            contentContract.approveContractQuality("Approve", new BigInteger("10000000000000000000"));

            // test multiple transfer action
            if (false) {
                System.out.println("Transfer some quality to multiple address");
                List<String> list = new ArrayList<>();
                list.add("0x3f16131ac9203656a9ca790f23878ae165c3eb4f");
                list.add("0x2e836371bf20107837da6ad9bb4d08d8f53f65ba");
                list.add("0x597ed0bf61b741a80d4774a4a4d318b431a07b07");
                list.add("0x9babfbae60ad466a5b68d29e127bb59429828216");
                List<BigInteger> valueList = new ArrayList<>();
                valueList.add(new BigInteger("200000000000000000"));
                valueList.add(new BigInteger("300000000000000000"));
                valueList.add(new BigInteger("400000000000000000"));
                valueList.add(new BigInteger("500000000000000000"));
                contentContract.transferTokens("transferMultipleAddress", list, valueList);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (CipherException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        UCWalletDemoApplication application = new UCWalletDemoApplication();
        application.testContentContract();
    }

    @Override
    public void success(String id, String txhash) {
        System.out.println("--->id:" + id + ", txhash:" + txhash);
    }

    @Override
    public void fail(String id, String message) {
        System.out.println("--->id:" + id + ", message:" + message);
    }
}
